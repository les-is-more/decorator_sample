install.packages('tidyverse')
iris
iris %>% head()
require(tidyverse)
iris %>% head()
?pca
?princomp
iris[-Species]
iris[,-Species]
iris[,vars(Species)]
iris[,vars(c(Species))]
iris[,vars(c('Species'))]
iris[,c('Species')]
iris[,-c('Species')]
iris[vars(c('Species'))]
iris[vars(c('Species'))]
iris[vars(-c('Species'))]
iris[-c('Species')]
iris %>% select(vars(-c('Species')))
iris %>% select(-vars('Species'))
?vars
iris %>% select(-c('Species'))
iris %>% select(-c('Species')) %>% head()
train_wo_label = iris %>% select(-c('Species')) %>%
train_wo_label = iris %>% select(-c('Species')) %>%
?princomp
train_wo_label = iris %>% select(-c('Species')) %>%
?princomp
train_wo_label = iris %>% select(-c('Species'))
?princomp
princomp(train_wo_label)
pc = princomp(train_wo_label)
str(pc)
pc$loadings
plot(pc)
require(tidyverse)
iris
?lm
nrow(iris)
?seq_len
train = sample(seq_len(nrow(iris)), size = floor(split_pct * nrow(iris)))
split_pct = .2
train = sample(seq_len(nrow(iris)), size = floor(split_pct * nrow(iris)))
iris[train,]
iris[-train,]
train
iris[train,]
iris[-train,]
split_pct = .7
train = sample(seq_len(nrow(iris)), size = floor(split_pct * nrow(iris)))
iris[train,]
rm(train)
glm(class ~ . ,data = train, family = 'binomial')
train = iris[train,]
test = iris[-train,]
sample_set = sample(seq_len(nrow(iris)), size = floor(split_pct * nrow(iris)))
train = iris[sample_set,]
test = iris[-sample_set,]
glm(class ~ . ,data = train, family = 'binomial')
mtcars
main_data = mtcars
set.seed(1990)
split_pct = .7
sample_set = sample(seq_len(nrow(main_data)), size = floor(split_pct * nrow(main_data)))
train = iris[sample_set,]
test = iris[-sample_set,]
lm(mpg ~ . ,data = train)
?lm
str(train)
main_data = mtcars
str(train)
?lm
set.seed(1990)
split_pct = .7
sample_set = sample(seq_len(nrow(main_data)), size = floor(split_pct * nrow(main_data)))
train = iris[sample_set,]
test = iris[-sample_set,]
str(train)
lm(formula= mpg ~ . ,data = train)
main_data = mtcars
set.seed(1990)
split_pct = .7
sample_set = sample(seq_len(nrow(main_data)), size = floor(split_pct * nrow(main_data)))
train = iris[sample_set,]
test = iris[-sample_set,]
str(train)
main_data = mtcars
set.seed(1990)
split_pct = .7
sample_set = sample(seq_len(nrow(main_data)), size = floor(split_pct * nrow(main_data)))
train = main_data[sample_set,]
test = main_data[-sample_set,]
str(train)
lm(formula= mpg ~ . ,data = train)
summarize(lm(formula= mpg ~ . ,data = train))
summary(lm(formula= mpg ~ . ,data = train))
lm_summ = summary(lm(formula= mpg ~ . ,data = train))
lm_summ$coefficients
require(jsonlite)
toJSON(lm_summ)
toJSON(lm_summ$coefficients)
lm_summ$coefficients
lm_summ$coefficients[1]
data_frame(lm_summ$coefficients)
toJSON(data_frame(lm_summ$coefficients))
class(lm_summ$coefficients)
lm_summ$coefficients.index
coeff = lm_summ$coefficients
coeff.index
index(coeff)
dir(coeff)
rownames(coeff)
toJSON(data_frame(rownames(coeff, lm_summ$coefficients))
)
toJSON(data_frame(rownames(coeff), lm_summ$coefficients))
data_frame(rownames(coeff), lm_summ$coefficients)
lm_summ %>% data_frame
lm_summ %>% data_frame()
lm_summ$coefficients %>% data_frame()
data_frame(lm_summ$coefficients)
toJSON(data_frame(rownames(coeff), lm_summ$coefficients))
base = data_frame(lm_summ$coefficients)
base
colnames(base)
colnames(base)
str(base)
dimnames(coeff)
dimnames(coeff)[1]
dimnames(coeff)[[1]]
dimnames(coeff)[[2]]
data(coeff)
getwd()
setwd('/Users/apple/Documents/_for_deletion/fromPythonPH FB/Simple-Projects/models')
getwd()
write_file(coeff, 'sample.txt')
coeff
install.packages('rjson')
require(rjson)
toJSON(coeff)
write.csv(coeff,'sample.csv')
p = summary(lm_summ)
class(p)
p
class(p)
summary(lm_summ)
summary(lm_summ)
lm_summ
class(lm_summ)
string(class(lm_summ))
as.character(lm_summ)
str(lm_summ)
toJSON(lm_summ)
lm_summ
class(lm_summ$coefficients)
data_frame(lm_summ$coefficients)
lm_summ
type(lm_summ)
class(lm_summ)
as.string(lm_summ)
as.character(lm_summ)
lm_summ
dimnames(lm_summ)
toJSON(lm_summ)
as.character(lm_summ)
lm_summ$
write.csv(lm_summ,'lm_summ.csv')
write.csv(lm_summ,'lm_summ.csv')
write.table(lm_summ,'lm_summ.csv')
write.table(print(lm_summ),'lm_summ.csv')
plot(lm_summ)
lm_summ$coefficients
class(lm_summ$coefficients)
lm_summ$coefficients[4]
lm_summ$coefficients[1]
lm_summ$coefficients[1,1]
lm_summ$coefficients[1,2]
lm_summ$coefficients[1,3]
dimnames(lm_summ)
rownames(lm_summ)
lm_model = lm(formula= mpg ~ . ,data = train)
lm_summ = summary(lm_model)
plot(lm_model)
par(mfrow=(2,2))
?mfrow
?par
par(mfrow=(2, 2))
par(mfrow=(2 2))
par(mfrow=c(2,2))
plot(lm_model)
hist(lm_model)
hist(lm_model$residuals)
par(mfrow=c(1,1))
hist(lm_model$residuals)
?hist
par(mfrow=c(1,1))
hist(lm_model$residuals)
curve(dchisq(x, df = 4), col = 2, lty = 2, lwd = 2, add = TRUE)
?curve
hist(lm_model$residuals)
mean(lm_model$residuals)
?curve
?dnorm()
?mean
# getting the histogram for the model residuals
par(mfrow=c(1,1))
hist(lm_model$residuals)
curve(dnorm(x, mean = mean(lm$residuals) , sd = sd(lm$residuals))
, col = 2, lty = 2, lwd = 2, add = TRUE)
curve(dnorm(x, mean = mean(lm$residuals) , sd = sd(lm$residuals)), col = 2, lty = 2, lwd = 2, add = TRUE)
dnorm(x, mean = mean(lm$residuals), sd = sd(lm$residuals))
par(mfrow=c(1,1))
hist(lm_model$residuals)
curve(dnorm(mean = mean(lm$residuals), sd = sd(lm$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
curve(dnorm(x, mean = mean(lm$residuals), sd = sd(lm$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
par(mfrow=c(1,1))
hist(lm_model$residuals)
curve(dnorm(x, mean = mean(lm_model$residuals), sd = sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
ean(lm_model$residuals)
mean(lm_model$residuals)
?hist
hist(lm_model$residuals)
par(mfrow=c(1,1))
hist(lm_model$residuals, title = 'Histogram of Model Residuals')
curve(dnorm(x, mean = mean(lm_model$residuals), sd = sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
?hist
par(mfrow=c(1,1))
hist(lm_model$residuals, main = 'Histogram of Model Residuals')
curve(dnorm(x, mean = mean(lm_model$residuals), sd = sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
?hist
hist(lm_model$residuals, main = 'Histogram of Model Residuals',
xlab = 'Standardized Residuals' ,ylab = 'Frequency')
par(mfrow=c(3,2))
plot(lm_model)
# getting the histogram for the model residuals
# par(mfrow=c(1,1))
hist(lm_model$residuals, main = 'Histogram of Model Residuals',
xlab = 'Standardized Residuals' ,ylab = 'Frequency')
curve(dnorm(x, mean = mean(lm_model$residuals), sd = sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
sd(lm_model$residuals)
hist(lm_model$residuals, main = 'Histogram of Model Residuals',
xlab = 'Standardized Residuals' ,ylab = 'Frequency')
curve(dnorm(x, mean = base::mean(lm_model$residuals), sd = stats::sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
par(mfrow=c(3,2))
plot(lm_model)
# getting the histogram for the model residuals
# par(mfrow=c(1,1))
hist(lm_model$residuals, main = 'Histogram of Model Residuals',
xlab = 'Standardized Residuals' ,ylab = 'Frequency')
curve(dnorm(x, mean = base::mean(lm_model$residuals), sd = stats::sd(lm_model$residuals)),
col = 2, lty = 2, lwd = 2, add = TRUE)
lm_model$fitted.values
mtcars
?predict
stats::predict(lm_model, test)
lm_model$fitted.values
test$mpg
stats::predict(lm_model, test)
class(test$mpg)
class(test)
test
lm_model
lm_summ
mse(lm_model, test)
modelr::mse(lm_model, test)
modelr::mse(lm_model, test)
modelr::rmse(lm_model, test)
modelr::mape(lm_model, test)
modelr::rsquare(lm_model, test)
modelr::rsquare(lm_model, train)
?modelr::bootstrap()
?map_df
View(mtcars)
View(main_data)
boot = bootstrap(main_data, 100)
boot = modelr::bootstrap(main_data, 100)
dim(mtcars)
iris = iris3
iris
iris3
class(iris3)
as.data.frame(class(iris3))
as.data.frame(iris3)
boston
dim(mtcars)
boot = modelr::bootstrap(main_data, 10)
boot = modelr::bootstrap(main_data, 100)
boot$strap
?bootstrap
models = map(boot$strap, ~ lm(mpg ~ wt, data = .))
tidied = purrr::map_df(models, broom::tidy, .id = "id")
tidied
models
tidied
main_data = mtcars
boot = modelr::bootstrap(main_data, 100)
models = map(boot$strap, ~ lm(mpg ~ wt, data = .))
tidied = purrr::map_df(models, broom::tidy, .id = "id")
tidied
boot$strap
boot$strap[[97]]
datasets::airquality
datasets::airquality %>% str()
datasets::airquality %>% describe()
datasets::airquality %>% summary()
dim(airquality)
?bootstrap
?bootstrap
?bootstrap
boot$strap
models
boot
boot %>% tail()
tidied
dim(airquality)
airquality
colnames(airquality)
boot = modelr::bootstrap(main_data, 100)
models = map(boot$strap, ~ lm(Ozone ~ ., data = ., na.rm = TRUE))
tidied = purrr::map_df(models, broom::tidy, .id = "id")
tidied
main_data = airquality
boot = modelr::bootstrap(main_data, 100)
models = map(boot$strap, ~ lm(Ozone ~ ., data = ., na.rm = TRUE))
tidied = purrr::map_df(models, broom::tidy, .id = "id")
tidied
tidied %>% filter(term == 'Wind')
tidied %>% filter(term == 'Wind') %>% ggplot()
tidied %>% filter(term == 'Wind') %>% ggplot() + line()
tidied %>% filter(term == 'Wind') %>% ggplot() + geom_line()
tidied %>% filter(term == 'Wind') %>% ggplot() + geom_bar()
tidied %>% filter(term == 'Wind') %>% ggplot(x=Term) + geom_bar()
tidied %>% filter(term == 'Wind') %>% ggplot(aes(x=Term)) + geom_bar()
tidied %>% filter(term == 'Wind') %>% ggplot(aes(x=term)) + geom_bar()
tidied %>% filter(term == 'Wind')
tidied %>% filter(term == 'Wind') %>% ggplot(aes(x=estimate)) + geom_bar()
tidied %>% filter(term == 'Wind') %>% ggplot(aes(weight=estimate)) + geom_bar()
?geom_bar
tidied %>% filter(term == 'Wind') %>% ggplot(aes(y=estimate)) + geom_line()
tidied %>% filter(term == 'Wind') %>% ggplot(aes(y=estimate, x = id)) + geom_line()
tidied %>% filter(term == 'Wind') %>% ggplot(aes(y=estimate, x = id, group = 1)) + geom_line()
# plotting the
tidied %>% filter(term == 'Wind') %>%
ggplot(aes( x = estimate)) + geom_hist()
# plotting the
tidied %>% filter(term == 'Wind') %>%
ggplot(aes( x = estimate)) + geom_histogram()
# plotting the
tidied %>%
ggplot(aes(x = estimate)) + geom_hist() + facet_wrap(~term)
# plotting the
tidied %>%
ggplot(aes(x = estimate)) + geom_histogram() + facet_wrap(~term)
# plotting the
tidied %>% filter(term != '(Intercept') %>%
ggplot(aes(x = estimate)) + geom_histogram() + facet_wrap(~term)
# plotting the
tidied %>% filter(!(term == '(Intercept')) %>%
ggplot(aes(x = estimate)) + geom_histogram() + facet_wrap(~term)
tidied %>% filter(!(term == '(Intercept'))
tidied %>% filter(!(term == '(Intercept)'))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram() + facet_wrap(~term)
# 153, 6
# [1] "Ozone"   "Solar.R" "Wind"    "Temp"    "Month"   "Day"
# Ozone and Solar.R columns have a number of NA's which must be imputed, given that their
datasets::airquality %>% summary()
airquality %>% select(Day) %>% class()
airquality %>% select(Day) %>% pull()
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue') + facet_wrap(~term)
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term)
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = 'Bootstrapped OLS Estimates for `mtcars` data')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = 'Bootstrapped OLS Estimates for $`mtcars`$ data')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = 'Bootstrapped OLS Estimates for $mtcars$ data')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = 'Bootstrapped OLS Estimates for mtcars data')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = "Bootstrapped OLS Estimates for mtcars data")
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = element_text("Bootstrapped OLS Estimates for mtcars data"))
?element_text
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = element_text("Bootstrapped OLS Estimates for mtcars data"))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = element_text("Bootstrapped OLS Estimates for mtcars data"))
?element_text
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(title = element_text("Bootstrapped OLS Estimates for mtcars data"))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(plot.title = element_text("Bootstrapped OLS Estimates for mtcars data"))
theme(plot.title = element_text(color = 'turquoise'))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise'))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise', size = 12))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise', font_size = 12))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise', size = 12))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise', size = 20))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for $mtcars$ data") +
theme(plot.title = element_text(color = 'turquoise', size = 20))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for `mtcars` data") +
theme(plot.title = element_text(color = 'turquoise', size = 20))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'turquoise', size = 20))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
ggtitle("Bootstrapped OLS Estimates for mtcars data") +
theme(plot.title = element_text(color = 'red', size = 20))
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(plot.title = element_text(color = 'red', size = 20)) +
labs(title = "Bootstrapped OLS Estimates for mtcars data" )
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(plot.title = element_text(color = 'red', size = 20)) +
labs(title = "Bootstrapped OLS Estimates for mtcars data",
y = 'Count', x= 'Parameter (Beta Estimate)',
subtitle = 'The original data has been bootstrapped for 100 times.')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(plot.title = element_text(color = 'red', size = 20),
axis.title.x = element_text(color = 'yellow', size= 25)) +
labs(title = "Bootstrapped OLS Estimates for mtcars data",
y = 'Count', x= 'Parameter (Beta Estimate)',
subtitle = 'The original data has been bootstrapped for 100 times.')
# plotting the
tidied %>% filter(!(term == '(Intercept)')) %>%
ggplot(aes(x = estimate)) + geom_histogram(fill = 'blue', color = 'white') + facet_wrap(~term) +
theme(plot.title = element_text(color = 'red', size = 20),
axis.title.x = element_text(color = 'blue', size= 15)) +
labs(title = "Bootstrapped OLS Estimates for mtcars data",
y = 'Count', x= 'Parameter (Beta Estimate)',
subtitle = 'The original data has been bootstrapped for 100 times.')
plot(lm_summ)
par(mfrow=c(3,2))
plot(lm_model)
par(mfrow=c(2,2))
plot(lm_model)
